"""
1. "Render Properties" > Set "Render Engine" to "Cycles"
2. "Render Properties" > "Sampling" > Set "Render" and "Viewport" to desired values
3. "Render Properties" > "Film" > Turn on "Transparent"

4. "Output Properties" > "Dimensions" > Set "Resolution X" and "Y" to desired values
4. "Output Properties" > "Dimensions" > Set "End" to a desired value
4. "Output Properties" > "Dimensions" > Set "Frame Rate" to a desired value

5. "Output Properties" > "Output" > Set the path that's at the top of the window, ending with ###.png
6. "Output Properties" > "Output" > Set "File Format" to "PNG"
7. "Output Properties" > "Output" > Set "Color" to "RGBA"
8. "Output Properties" > "Output" > Set "Compression" to "100"

9. "World Properties" > "Surface" > Click the colored bar > "Hex" > Set "65A5E6"
"""


import bpy
import os, sys
from PIL import Image, ImageDraw


DITHERING = False

# TODO: Find out how this Python script's path can be gotten so this palette file path can automatically be found
PALETTE_FILE_PATH = "I:/Programming/Cortex-Command-Mods/blender_test.rte/Blender Files/palette.bmp"


def convert(self):
	palette = get_palette()
	old_path, new_path = get_img_paths()
	process_img(old_path, new_path, palette)
	os.remove(old_path) # old_path's image can't be overwritten as the old images start at frame 1, instead of frame 0


def get_palette():
	return Image.open(PALETTE_FILE_PATH).getpalette()
#	return [0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 255, 255, 0, 255, 0, 255, 255, 255, 255]
#	return [0, 0, 0, 255, 255, 255]


def get_img_paths():
	old_path_with_hashtags_for_framecount = bpy.context.scene.render.filepath
	frame = bpy.context.scene.frame_current

	# old_path is generated by Blender and starts at frame 1, instead of frame 0
	old_path = old_path_with_hashtags_for_framecount.replace("###", str(frame).zfill(3))
	new_path = old_path_with_hashtags_for_framecount.replace("###", str(frame - 1).zfill(3))
	
	return old_path, new_path


def process_img(old_path, new_path, palette):
	old_img = Image.open(old_path)

	# thresh=3 is the bare minimum value needed to replace the black-blue background pixels
	# Setting thresh too high will cause blackish pixels on the edge of the object to also be replaced with pink pixels 
	ImageDraw.floodfill(old_img, xy=(0, 0), value=(255, 0, 255, 255), thresh=3)
	
	# putpalette() always expects 256 * 3 ints, so this pads with the first RGB color in the palette
	for i in range(256 - int(len(palette) / 3)):
		for j in range(3):
			palette.append(palette[j])

	palette_img = Image.new("P", (1, 1))
	palette_img.putpalette(palette)

	old_img.convert("RGB").quantize(palette=palette_img, dither=DITHERING).save(new_path)


if __name__ == "__main__":
	print("Added palette handler")
	bpy.app.handlers.render_post.append(convert)