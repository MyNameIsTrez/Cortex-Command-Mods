return {
	ActorEditor = nil,
	AreaEditor = nil,
	AssemblyEditor = nil,
	BaseEditor = nil,
	EditorActivity = nil,
	GameActivity = {
		CPUTeam = "Which team is CPU-managed, if any. LEGACY, now controlled by PlayerNIsHuman, where N is between 1 and 4 inclusive.",
		DeliveryDelay = "Time it takes for a delivery to be made in milliseconds.",
		DefaultFogOfWar = "Default fog of war value.",
		DefaultRequireClearPathToOrbit = "Default clear path to orbit value.",
		DefaultDeployUnits = "Default deploy units value.",
		DefaultGoldCake = "Default gold amount for Cake difficulty.",
		DefaultGoldEasy = "Default gold amount for Easy difficulty.",
		DefaultGoldMedium = "Default gold amount for Medium difficulty.",
		DefaultGoldHard = "Default gold amount for Hard difficulty.",
		DefaultGoldNuts = "Default gold amount for Nuts difficulty.",
		FogOfWarSwitchEnabled = "Whether the fog of war switch is enabled in the scenario setup dialog.",
		DeployUnitsSwitchEnabled = "Whether the deploy units switch is enabled in the scenario setup dialog.",
		GoldSwitchEnabled = "Whether the gold switch is enabled in the scenario setup dialog.",
		RequireClearPathToOrbitSwitchEnabled = "Whether the require clear path to orbit switch is enabled in the scenario setup dialog.",
		BuyMenuEnabled = "Whether the buy menu is enabled.",
	},
	GAScripted = {
		ScriptPath = "The path to the lua script file that defines this' behaviors with overrides of its virtual functions",
		LuaClassName = "The name of the class (table) defining the logic of this in Lua, as specified in the script file",
	},
	GATutorial = nil,
	GibEditor = nil,
	MultiplayerGame = nil,
	MultiplayerServerLobby = nil,
	SceneEditor = nil,
	ACDropShip = {
		AutoStabilize = "Automatically stabilize the craft with the upper thrusters? Defaults to yes.",
		MaxEngineAngle = "Maximum engine rotation in degrees",
		LateralControlSpeed = "Abstract speed at which Lateralcontroll is changed",
		HoverHeightModifier = "The modifier for the height at which this ACDropShip should hover above terrain when releasing its cargo. Used in cpp and Lua AI.",
	},
	ACrab = {
		-- JumpTime = "",
		JetTime = "The max total time, in ms, that the jetpack can be used without pause",
		-- JumpReplenishRate = "",
		JetReplenishRate = "A multiplier affecting how fast the jetpack fuel will replenish when not in use. 1 means that jet time replenishes at 2x speed in relation to depletion.",
		-- JumpAngleRange = "",
		JetAngleRange = "Ratio at which the jetpack angle follows aim angle",
		AimRangeUpperLimit = "The maximum angle MountedMO can be aimed up, positive values only, in radians",
		AimRangeLowerLimit = "The maximum angle MountedMO can be aimed down, positive values only, in radians",
	},
	ACraft = {
		Exit = {
			VelocitySpread = "The spread in velocity, ratio",
			Radius = "The width from the center tanget created by the velocity vector out from the offet point. This times two gives the total width of the opening.",
			Range = "How far away the exit can suck objects in from",
		},
		HatchDelay = "The time it takes to open or close the hatch, in ms.",
		DeliveryDelayMultiplier = "Mutliplier to apply to default delivery time",
		ExitInterval = "The delay between each exiting passenger Actor",
		CanLand = "Whether this is capable of landing on the ground at all",
		MaxPassengers = "The maximum number of actors that fit in the inventory",
		ScuttleIfFlippedTime = "The time after which the craft will scuttle automatically, if tipped over.",
		ScuttleOnDeath = "Whether the craft will self-destruct at zero health.",
	},
	ACRocket = {
		MaxGimbalAngle = "How much the main engine is able to tilt in order to stabilize the rocket.",
	},
	Activity = {
		Description = "User-friendly description of what this Activity is all about.",
		SceneName = "The name of the Scene in which this Activity takes place.",
		MaxPlayerSupport = "How many separate players this Activity can support at the same time.",
		MinTeamsRequired = "How many separate teams this Activity can support at the same time.",
		Difficulty = "Current difficulty setting of this Activity.",
		CraftOrbitAtTheEdge = "If true then on non-wrapping maps craft beyond the edge of the map are considered orbited.",
		InCampaignStage = "Which stage of the campaign this Activity appears in, if any (-1 means it's not in the campaign).",
		TeamOfPlayer1 = "",
		TeamOfPlayer2 = "",
		TeamOfPlayer3 = "",
		TeamOfPlayer4 = "The designated team of player 4",
		Player1IsHuman = "",
		Player2IsHuman = "",
		Player3IsHuman = "",
		Player4IsHuman = "Whether player 4 is Human or not, and needs a screen etc.",
		Team1Name = "",
		Team2Name = "",
		Team3Name = "",
		Team4Name = "Name of team 4",
		Team1Funds = "",
		Team2Funds = "",
		Team3Funds = "",
		Team4Funds = "Gold counter for team 4.",
		TeamFundsShareOfPlayer1 = "",
		TeamFundsShareOfPlayer2 = "",
		TeamFundsShareOfPlayer3 = "",
		TeamFundsShareOfPlayer4 = "The ratio of how much player 4 contributed to their team's funds at the start of the Activity.",
		FundsContributionOfPlayer1 = "",
		FundsContributionOfPlayer2 = "",
		FundsContributionOfPlayer3 = "",
		FundsContributionOfPlayer4 = "How much player 4 contributed to their team's funds at the start of the Activity.",
	},
	Actor = {
		Status = "0 for STABLE, 1 for UNSTABLE, 2 for INACTIVE, 3 for DYING, and 4 for DEAD.",
		DeploymentID = "ID of deployment which spawned this actor",
		PassengerSlots = "How many passenger slots this actor will take in a craft",
		Health = "Health of the actor",
		MaxHealth = "Maximum health of the actor",
		ImpulseDamageThreshold = "Threshold for taking damage from travel impulses, in kg * m/s",
		StableRecoveryDelay = "The delay before regaining stability after losing it, in MS",
		AimAngle = "Current Aim angle within the AimRange",
		AimRange = "The arc range of the aiming angle, in each direction, in radians. Eg if HalfPI, it means full 180 degree range",
		AimDistance = "How far the actor aims/looks by default",
		SharpAimDelay = "The time it takes to achieve complete full sharp aiming",
		SightDistance = "How far this guy's AI can see when he's just looking ahead",
		Perceptiveness = "How perceptive this is of alarming events going on around him, 0.0 - 1.0",
		CanRevealUnseen = "Whether or not this actor can reveal unseen areas by looking",
		CharHeight = "How tall the Actor is in pixels",
		MaxInventoryMass = "The mass limit for this Actor's inventory. -1 means there's no limit.",
		AIMode = "The current mode the AI is set to perform as",
		Organic = "Flag for whether or not this Actor is organic. Useful for lua purposes and mod support.",
		Mechanical = "Flag for whether or not this Actor is robotic. Useful for lua purposes and mod support.",
	},
	ADoor = {
		DoorMoveTime = "The time it takes to open or close the door in ms.",
		ClosedByDefault = "Whether the closed position is the default.",
		ResetDefaultDelay = "How long the door stays in the non-default state before returning to the default state.",
		SensorInterval = "The delay between each sensing pass in ms.",
		DrawMaterialLayerWhenOpen = "Whether to draw the door's silhouette to the terrain material layer when fully open.",
		DrawMaterialLayerWhenClosed = "Whether to draw the door's silhouette to the terrain material layer when fully closed.",
	},
	ADSensor = {
		SkipPixels = "How many pixels to skip between sensing pixels.",
	},
	AEmitter = {
		EmissionEnabled = "Whether emitting is currently enabled or not.",
		EmissionCount = "The number of emissions emitted since emission was last enabled",
		EmissionCountLimit = "The max number of emissions to emit per emit being enabled",
		ParticlesPerMinute = "Emission rate",
		NegativeThrottleMultiplier = "The multiplier applied to the emission rate when throttle is negative. Relative to the absolute throttle value.",
		PositiveThrottleMultiplier = "The multiplier applied to the emission rate when throttle is positive. Relative to the absolute throttle value.",
		Throttle = "The normalized throttle which controls the MSPE between 1.0 * m_MSPERange and -1.0 * m_MSPERange. 0 means emit the regular m_PPM amount.",
		EmissionsIgnoreThis = "Whether or not this' emissions ignore hits with itself, even if they are set to hit other MOs.",
		BurstSize = "The number of particles in the first initial burst of emissions that this AEmitter will generate upon emitting.",
		BurstScale = "The scale factor that will be applied to the regular spread and emission velocity to get the the burst particle parameters.",
		BurstDamage = "Damage dealt to the attached-to parent upon bursting.",
		EmitterDamageMultiplier = "Damage multiplier derived from penetrating particle. Affects both burst and emit damage values.",
		BurstSpacing = "The shortest possible time between bursts, in ms",
		BurstTriggered = "Indicates that a burst is set to happen during the next Update.",
		EmissionDamage = "The amount of damage points that this emitter collects when emitting one non-burst particle.",
		FlashScale = "Flash display scale",
		FlashOnlyOnBurst = "Whether to only display flash on bursts, and not on any emission frame.",
		LoudnessOnEmit = "How far this is audiable (in screens) when emitting as a jetpack or craft engine",
	},
	AHuman = {
		ThrowPrepTime = "The duration it takes this AHuman to fully charge a throw.",
		LookToAimRatio = "Ratio at which the head's rotation follows the aim angle",
		-- JumpTime = "",
		JetTime = "The max total time, in ms, that the jetpack can be used without pause",
		-- JumpReplenishRate = "",
		JetReplenishRate = "A multiplier affecting how fast the jetpack fuel will replenish when not in use. 1 means that jet time replenishes at 2x speed in relation to depletion.",
		-- JumpAngleRange = "",
		JetAngleRange = "Ratio at which the jetpack angle follows aim angle",
		FGArmFlailScalar = "The rate at which this AHuman's FG Arm follows the the bodily rotation. Best to keep this at 0 so it doesn't complicate aiming.",
		BGArmFlailScalar = "The rate at which this AHuman's BG Arm follows the the bodily rotation. Set to a negative value for a "counterweight" effect.",
		ArmSwingRate = "Controls the rate at which this AHuman's arms follow the movement of its legs.",
		StandRotAngleTarget = "Rotation angle target for the STAND state.",
		WalkRotAngleTarget = "Rotation angle target for the WALK state.",
		CrouchRotAngleTarget = "Rotation angle target for the CROUCH state.",
		JumpRotAngleTarget = "Rotation angle target for the JUMP state.",
	},
	Arm = {
		GripStrength = "The strength with which this Arm will grip its HeldDevice. Effectively supercedes the HeldDevice's JointStrength.",
		ThrowStrength = "The strength with which this Arm will throw a ThrownDevice. Effectively supercedes the ThrownDevice's ThrowVelocity values.",
		MaxLength = "The maximum reaching length of this Arm. Max distance between the joint position and the hand offset. Length of a straight arm sprite in pixels.",
		WillIdle = "Whether this Arm will go to the idle position if it didn't reach.",
		MoveSpeed = "How fast the arm moves to a reach target, on a scale from 0.0 (frozen) to 1.0 (instantly there).",
	},
	AtomGroup = {
		AutoGenerate = "Whether the Atoms in this AtomGroup were automatically generated based on a sprite, or manually defined.",
		Resolution = "The density of Atoms in this AtomGroup along the outline of the owning MOSR's graphical representation. Higher values mean more pixels are skipped along the outline when placing Atoms. For example: a box that is 20x20px will have an outline of 80px, with a resolution value of 10 an Atom will be placed every 10 pixels on this outline, resulting in an AtomGroup that consists of 8 Atoms total with 2 Atoms on each plane. Note that the outline isn't actually "unwrapped" and higher values may result in slightly less accurate Atom placement on complex sprites. 0 means the Atoms in this AtomGroup were defined manually. 1 means the whole outline will be populated with Atoms, resulting in the most accurate physical representation.",
		Depth = "The depth Atoms in this AtomGroup are placed off the edge of the owning MOSR's graphical representation outline towards it's center, in pixels.",
	},
	Attachable = {
		DrawAfterParent = "Whether to draw this Attachable after (in front of) or before (behind) the parent.",
		DeleteWhenRemovedFromParent = "Whether this Attachable should be deleted when it's removed from its parent.",
		ApplyTransferredForcesAtOffset = "Whether forces transferred from this Attachable should be applied at the rotated parent offset (which will produce torque), or directly at the parent's position. Mostly useful to make jetpacks and similar emitters viable.",
		GibWithParentChance = "The percentage chance that this Attachable will gib when its parent does. 0 means never, 1 means always.",
		ParentGibBlastStrengthMultiplier = "The multiplier for how strongly this Attachable's parent's gib blast strength will be applied to it when its parent's gibs.",
		JointStrength = "The amount of impulse force needed on this to detach it from the host Actor, in kg * m/s. A value of 0 means the join is infinitely strong and will never break naturally.",
		-- Strength = "",
		JointStiffness = "The normalized joint stiffness scalar. 1.0 means impulse forces on this attachable will be transferred to the parent with 100% strength, 0 means they will not transfer at all.",
		-- Stiffness = "",
		InheritsHFlipped = "Whether this Attachable should inherit its parent's HFlipped. Defaults to 1 (normal inheritance).",
		InheritsRotAngle = "Whether this Attachable should inherit its parent's RotAngle. Defaults to true.",
		-- InheritedRotAngleRadOffset = "",
		InheritedRotAngleOffset = "The offset in radians by which this Attachable should be rotated when it's set to inherit its parent's rotation angle. Defaults to 0.",
		InheritedRotAngleDegOffset = "The offset in degrees by which this Attachable should be rotated when it's set to inherit its parent's rotation angle. Defaults to 0.",
		InheritsFrame = "Whether this Attachable should inherit its parent's Frame. Defaults to false.",
		CollidesWithTerrainWhileAttached = "Whether this attachable currently has terrain collisions enabled while it's attached to a parent.",
	},
	BunkerAssembly = {
		ParentScheme = "The name of the parent BunkerAssemblyScheme.",
	},
	BunkerAssemblyScheme = {
		Limit = "How many assemblies can be placed on one scene",
		OneTypePerScene = "If this is true then sceneman must select a single assembly for this scheme and use it everywhere on the scene",
		MaxDeployments = "How many deployments should be selected during placement",
	},
	Deployment = {
		SpawnRadius = "The radius around this deployment that gets checked if another actor/item of the same type and name already exists and will block re-spawning a new one by this",
		WalkRadius = "The radius around this deployment that gets checked if an actor spawned by this deployment is present. If it is, deployment is blocked.",
		ID = "Unique deployment ID, assigned to units deployed by this deployment",
		HFlipped = "Whether the deployment and its loadout is flipped",
	},
	Emission = {
		ParticlesPerMinute = "Emission rate",
		BurstSize = "The number of particles in the first initial burst of emissions that this AEmitter will generate upon emitting.",
		Spread = "The angle spread of velocity of the emitted MO's to each side of the m_EmitAngle angle, in radians. PI/2 would mean that MO's fly out to one side only, with the m_Rotation defining the middle of that half circle.",
		MinVelocity = "The minimum velocity an emitted MO can have when emitted",
		MaxVelocity = "The maximum velocity an emitted MO can have when emitted",
		LifeVariation = "The variation in life time of each emitted aprticle, in percentage of the existing life time of the partilcle",
		PushesEmitter = "Whether these emissions push the emitter around with recoil or not.",
		InheritsVel = "How much of the parents velocity this emission inherits",
		StartTimeMS = "When to start this emission, in milliseconds.",
		StopTimeMS = "When to stop this emission, in milliseconds.",
	},
	Gib = {
		Count = "The number of copies of the GibParticle that will be spawned.",
		Spread = "The angle spread of the spawned GibParticle objects to each side of the parent's angle in radians.",
		MinVelocity = "The minimum velocity a GibParticle object can have when spawned.",
		MaxVelocity = "The maximum velocity a GibParticle object can have when spawned.",
		LifeVariation = "The per-Gib variation in Lifetime, in percentage of the existing Lifetime of the gib.",
		InheritsVel = "Whether this Gib should inherit the velocity of the exploding parent or not.",
		IgnoresTeamHits = "Whether this Gib should ignore hits with the team of the exploding parent or not.",
		SpreadMode = "Determines what kind of logic is used when applying velocity to the GibParticle objects.",
	},
	GlobalScript = {
		LuaClassName = "The name of the class (table) defining the logic of this in Lua, as specified in the script file.",
		LateUpdate = "Whether or not this GlobalScript should be updated late, i.e. after the standard MovableMan update.",
	},
	HDFirearm = {
		RateOfFire = "If 0, firearm is semi-automatic (ie only one discharge per activation).",
		ActivationDelay = "Delay between activation and full round output is achieved, in ms",
		DeactivationDelay = "Delay between release of activation and another can be started, in ms",
		ReloadTime = "Reload time in milliseconds.",
		FullAuto = "Whether this HDFirearm is full or semi-auto.",
		FireIgnoresThis = "Whether particles fired from this HDFirearm will ignore hits with itself, and the root parent of this HDFirearm, regardless if they are set to hit MOs.",
		Reloadable = "Whether this HDFirearm is reloadable by normal means.",
		RecoilTransmission = "The normalized joint stiffness scalar. 1.0 means impulse forces on this attachable will be transferred to the parent with 100% strength, 0 means they will not transfer at all.",
		IsAnimatedManually = "If true m_Frame is not changed during an update hence the animation is done by external Lua code",
		ShakeRange = "Range of normal shaking of entire weapon.",
		SharpShakeRange = "Range of shaking of entire weapon during sharp aiming.",
		NoSupportFactor = "Factor for how much more weapon shakes if it isn't supported by a second hand.",
		ParticleSpreadRange = "Range of spread angle of fired particles, in one direction",
		ShellEjectAngle = "Angle in which shells are ejected relative to this weapon",
		ShellSpreadRange = "Range of spread angle of ejected shells, in one direction",
		ShellAngVelRange = "Range of spread in ang vel of ejected shells, in one direction",
		ShellVelVariation = "The velocity variation scalar of ejected shells.",
		LegacyCompatibilityRoundsAlwaysFireUnflipped = "Legacy compatibility flag to make it so rounds don't flip with the gun. Useful for old mods with things like missiles that accounted for the old code that didn't flip them properly.",
	},
	HeldDevice = {
		HeldDeviceType = "Indicates what kind of held device this is, see the HeldDeviceType enum",
		OneHanded = "Can be wielded well with one hand or not",
		DualWieldable = "Can be wielded with bg hand or not",
		GripStrengthMultiplier = "The multiplier for how well this HeldDevice can be gripped by Arms.",
		SharpLength = "How much farther the player can see when aiming this sharply.",
		Loudness = "How loud this device is when activated. 0 means perfectly quiet 0.5 means half of normal (normal equals audiable from ~half a screen)",
	},
	Icon = {
		FrameCount = "Number of frames in this Icon's animation.",
	},
	Leg = {
		WillIdle = "Whether the Leg will go to idle position if the target position is above the Leg's joint position.",
		MoveSpeed = "How fast the Leg moves to a reach target, 0 means it doesn't and 1 means it moves instantly.",
	},
	LimbPath = {
		StartSegCount = "The number of starting segments, counting into the path from its beginning, that upon restart of this path will be tried in reverse order till one which yields a starting position that is clear of terrain is found.",
		EndSegCount = "The segment after which foot collisions will be disabled for this limbpath, if it's for legs.",
		SlowTravelSpeed = "The constant speed that the limb traveling this path slowly has in m/s.",
		NormalTravelSpeed = "The constant speed that the limb traveling this path normally has in m/s.",
		FastTravelSpeed = "The constant speed that the limb traveling this path quickly has in m/s.",
		PushForce = "The max force that a limb travelling along this path can push, in kg * m/(s^2)",
	},
	Loadout = nil,
	Magazine = {
		RoundCount = "How many rounds in mag. Negative value means infinite ammo",
		RTTRatio = "The ratio between regular and tracer rounds. 0 means no tracers. e.g. 3 means every third round will be a tracer. ie Round To Tracer (RTT) ratio.",
		Discardable = "Whether this magazine should be released into the scene when discarded, or just be deleted instead",
		AIBlastRadius = "Tells the AI what distance in pixels from this round is mostly safe.",
	},
	Material = {
		Index = "Index of this in the material palette. 0 - 255.",
		Priority = "The priority that a pixel of this material has to be displayed. The higher the number, the higher chances that a pixel of this material will be drawn on top of others.",
		Piling = "The amount of times a dislodged pixel of this Material will attempt to relocate upwards, when intersecting a terrain pixel of the same Material. TODO: Better property name?",
		-- Integrity = "",
		StructuralIntegrity = "The impulse force that a particle needs to knock loose a terrain pixel of this material. In kg * m/s.",
		-- Restitution = "",
		Bounce = "A scalar value that defines the restitution (elasticity). 1.0 = no kinetic energy is lost in a collision, 0.0 = all energy is lost (plastic).",
		Friction = "A scalar value that defines the friction coefficient. 1.0 = will snag onto everything, 0.0 = will glide with no friction.",
		Stickiness = "A scalar value that defines the stickiness coefficient (no sticky 0.0 - 1.0 max). Determines the likelihood of something of this material sticking when a collision occurs.",
		DensityKGPerVolumeL = "Density in Kg/L.",
		DensityKGPerPixel = "Density in kg/pixel, usually calculated from the KG per Volume L property.",
		GibImpulseLimitPerVolumeL = "How much impulse gib limit of an object increases per liter of this material.",
		GibWoundLimitPerVolumeL = "How much wound gib limit of an object increases per liter of this material.",
		SettleMaterial = "The material to turn particles of this into when they settle on the terrain. 0 here means to spawn this material.",
		-- SpawnMaterial = "",
		TransformsInto = "The material to spawn instead of this one for special effects, etc. 0 here means to spawn this material.",
		IsScrap = "Whether this material is scrap material made from gibs of things that have already been blown apart.",
		UseOwnColor = "Whether or not to use the own color when a pixel of this material is knocked loose from the terrain. If 0, then the terrain pixel's color will be applied instead.",
	},
	MetaPlayer = {
		Name = "",
		Team = "",
		Human = "",
		InGamePlayer = "",
		Aggressiveness = "",
		GameOverRound = "",
		NativeTechModule = "",
		NativeCostMultiplier = "",
		ForeignCostMultiplier = "",
		BrainPool = "",
		Funds = "",
		OffensiveBudget = "",
		OffensiveTarget = "",
	},
	MetaSave = {
		SavePath = "",
		PlayerCount = "",
		Difficulty = "",
		RoundCount = "",
		SiteCount = "",
	},
	MOPixel = {
		MinLethalRange = "",
		MaxLethalRange = "",
	},
	MOSParticle = nil,
	MOSprite = {
		FrameCount = "",
		SpriteAnimMode = "",
		SpriteAnimDuration = "",
		HFlipped = "",
		AngularVel = "",
		SettleMaterialDisabled = "",
	},
	MOSRotating = {
		DeepCheck = "",
		OrientToVel = "",
		GibImpulseLimit = "",
		GibWoundLimit = "",
		-- WoundLimit = "",
		GibBlastStrength = "",
		WoundCountAffectsImpulseLimitRatio = "",
		GibAtEndOfLifetime = "",
		EffectOnGib = "",
		LoudnessOnGib = "",
		DamageMultiplier = "",
	},
	MovableObject = {
		Mass = "",
		Scale = "",
		GlobalAccScalar = "",
		AirResistance = "",
		AirThreshold = "",
		PinStrength = "",
		RestThreshold = "",
		LifeTime = "",
		Sharpness = "",
		HitsMOs = "",
		GetsHitByMOs = "",
		IgnoresTeamHits = "",
		IgnoresAtomGroupHits = "",
		IgnoresAGHitsWhenSlowerThan = "",
		RemoveOrphanTerrainRadius = "",
		RemoveOrphanTerrainMaxArea = "",
		RemoveOrphanTerrainRate = "",
		MissionCritical = "",
		CanBeSquished = "",
		HUDVisible = "",
		ScriptPath = "",
		EffectStartTime = "",
		EffectRotAngle = "",
		InheritEffectRotAngle = "",
		RandomizeEffectRotAngle = "",
		RandomizeEffectRotAngleEveryFrame = "",
		EffectStopTime = "",
		EffectStartStrength = "",
		EffectStopStrength = "",
		EffectAlwaysShows = "",
		DamageOnCollision = "",
		DamageOnPenetration = "",
		WoundDamageMultiplier = "",
		ApplyWoundDamageOnCollision = "",
		ApplyWoundBurstDamageOnCollision = "",
		IgnoreTerrain = "",
		SimUpdatesBetweenScriptedUpdates = "",
	},
	PEmitter = {
		EmissionEnabled = "",
		EmissionCount = "",
		EmissionCountLimit = "",
		ParticlesPerMinute = "",
		NegativeThrottleMultiplier = "",
		PositiveThrottleMultiplier = "",
		Throttle = "",
		EmissionsIgnoreThis = "",
		BurstSize = "",
		BurstScale = "",
		BurstSpacing = "",
		BurstTriggered = "",
		FlashScale = "",
		FlashOnlyOnBurst = "",
		LoudnessOnEmit = "",
	},
	PieMenu = {
		IconSeparatorMode = "",
		FullInnerRadius = "",
		BackgroundThickness = "",
		BackgroundSeparatorSize = "",
		DrawBackgroundTransparent = "",
		BackgroundColor = "",
		BackgroundBorderColor = "",
		SelectedItemBackgroundColor = "",
	},
	PieSlice = {
		Type = "",
		Direction = "",
		CanBeMiddleSlice = "",
		Enabled = "",
		ScriptPath = "",
		FunctionName = "",
		DrawFlippedToMatchAbsoluteAngle = "",
	},
	Round = {
		ParticleCount = "",
		FireVelocity = "",
		InheritsFirerVelocity = "",
		Separation = "",
		LifeVariation = "",
		ShellVelocity = "",
		AILifeTime = "",
		AIFireVel = "",
		AIPenetration = "",
	},
	Scene = {
		Area = {
			Name = "",
		},
		MetagamePlayable = "",
		Revealed = "",
		MetasceneParent = "",
		MetagameInternal = "",
		OwnedByTeam = "",
		RoundIncome = "",
		P1BuildBudget = "",
		P2BuildBudget = "",
		P3BuildBudget = "",
		P4BuildBudget = "",
		P1BuildBudgetRatio = "",
		P2BuildBudgetRatio = "",
		P3BuildBudgetRatio = "",
		P4BuildBudgetRatio = "",
		AutoDesigned = "",
		TotalInvestment = "",
		ScanScheduledTeam1 = "",
		ScanScheduledTeam2 = "",
		ScanScheduledTeam3 = "",
		ScanScheduledTeam4 = "",
	},
	SceneLayer = {
		WrapX = "",
		WrapY = "",
	},
	SceneObject = {
		SOPlacer = {
			HFlipped = "",
			Team = "",
		},
		GoldValue = "",
		-- GoldCost = "",
		Buyable = "",
		BuyableMode = "",
		Team = "",
		PlacedByPlayer = "",
	},
	SLBackground = {
		FrameCount = "",
		SpriteAnimMode = "",
		SpriteAnimDuration = "",
		IsAnimatedManually = "",
		DrawTransparent = "",
		IgnoreAutoScaling = "",
		CanAutoScrollX = "",
		CanAutoScrollY = "",
		AutoScrollStepInterval = "",
	},
	SLTerrain = nil,
	SoundContainer = {
		SoundSelectionCycleMode = "",
		-- CycleMode = "",
		SoundOverlapMode = "",
		Immobile = "",
		AttenuationStartDistance = "",
		LoopSetting = "",
		Priority = "",
		AffectedByGlobalPitch = "",
		Volume = "",
		Pitch = "",
		PitchVariation = "",
	},
	SoundSet = {
		SoundSelectionCycleMode = "",
	},
	TDExplosive = {
		IsAnimatedManually = "",
	},
	TerrainDebris = {
		DebrisPieceCount = "",
		DebrisPlacementMode = "",
		OnlyBuried = "",
		MinDepth = "",
		MaxDepth = "",
		MinRotation = "",
		MaxRotation = "",
		CanHFlip = "",
		CanVFlip = "",
		FlipChance = "",
		DensityPerMeter = "",
	},
	TerrainFrosting = {
		MinThickness = "",
		MaxThickness = "",
		InAirOnly = "",
	},
	TerrainObject = nil,
	ThrownDevice = {
		MinThrowVel = "",
		MaxThrowVel = "",
		TriggerDelay = "",
		ActivatesWhenReleased = "",
	},
	Turret = {
		MountedDeviceRotationOffset = "",
	},
	MetaMan = {
		GameState = "",
		GameName = "",
		TeamCount = "",
		CurrentRound = "",
		RevealedScenes = "",
		RevealRate = "",
		RevealExtra = "",
		CurrentOffensive = "",
		Difficulty = "",
	},
	MovableMan = {
		SplashRatio = "",
	},
	SceneMan = nil,
	SettingsMan = {
		ResolutionX = "",
		ResolutionY = "",
		ResolutionMultiplier = "",
		DisableMultiScreenResolutionValidation = "",
		ForceVirtualFullScreenGfxDriver = "",
		ForceDedicatedFullScreenGfxDriver = "",
		TwoPlayerSplitscreenVertSplit = "",
		MasterVolume = "",
		MuteMaster = "",
		MusicVolume = "",
		MuteMusic = "",
		SoundVolume = "",
		MuteSounds = "",
		SoundPanningEffectStrength = "",
		ListenerZOffset = "",
		MinimumDistanceForPanning = "",
		ShowForeignItems = "",
		FlashOnBrainDamage = "",
		BlipOnRevealUnseen = "",
		MaxUnheldItems = "",
		UnheldItemsHUDDisplayRange = "",
		AlwaysDisplayUnheldItemsInStrategicMode = "",
		SloMoThreshold = "",
		SloMoDurationMS = "",
		EndlessMode = "",
		EnableCrabBombs = "",
		CrabBombThreshold = "",
		ShowEnemyHUD = "",
		SmartBuyMenuNavigation = "",
		LaunchIntoActivity = "",
		DefaultActivityType = "",
		DefaultActivityName = "",
		DefaultSceneName = "",
		DisableLuaJIT = "",
		RecommendedMOIDCount = "",
		SimplifiedCollisionDetection = "",
		SceneBackgroundAutoScaleMode = "",
		DisableFactionBuyMenuThemes = "",
		EnableParticleSettling = "",
		EnableMOSubtraction = "",
		DeltaTime = "",
		RealToSimCap = "",
		AllowSavingToBase = "",
		ShowMetaScenes = "",
		SkipIntro = "",
		ShowToolTips = "",
		CaseSensitiveFilePaths = "",
		DisableLoadingScreenProgressReport = "",
		LoadingScreenProgressReportPrecision = "",
		ConsoleScreenRatio = "",
		ConsoleUseMonospaceFont = "",
		AdvancedPerformanceStats = "",
		MenuTransitionDurationMultiplier = "",
		DrawAtomGroupVisualizations = "",
		DrawHandAndFootGroupVisualizations = "",
		DrawLimbPathVisualizations = "",
		DrawRaycastVisualizations = "",
		DrawPixelCheckVisualizations = "",
		PrintDebugInfo = "",
		MeasureModuleLoadTime = "",
		PlayerNetworkName = "",
		NetworkServerName = "",
		UseNATService = "",
		NATServiceAddress = "",
		NATServerName = "",
		NATServerPassword = "",
		UseExperimentalMultiplayerSpeedBoosts = "",
		ClientInputFps = "",
		ServerTransmitAsBoxes = "",
		ServerBoxWidth = "",
		ServerBoxHeight = "",
		ServerUseHighCompression = "",
		ServerUseFastCompression = "",
		ServerHighCompressionLevel = "",
		ServerFastAccelerationFactor = "",
		ServerUseInterlacing = "",
		ServerEncodingFps = "",
		ServerSleepWhenIdle = "",
		ServerSimSleepWhenIdle = "",
		VisibleAssemblyGroup = "",
		DisableMod = "",
		EnableGlobalScript = "",
		MouseSensitivity = "",
	},
	MetagameGUI = nil,
	Atom = {
		TrailLength = "",
		TrailLengthVariation = "",
	},
	Box = {
		Width = "",
		Height = "",
	},
	Color = {
		Index = "",
		R = "",
		G = "",
		B = "",
	},
	ContentFile = {
		FilePath = "",
		-- Path = "",
	},
	DataModule = {
		ModuleName = "",
		Author = "",
		Description = "",
		IsFaction = "",
		IsMerchant = "",
		SupportedGameVersion = "",
		Version = "",
		ScanFolderContents = "",
		IgnoreMissingItems = "",
		CrabToHumanSpawnRatio = "",
		ScriptPath = "",
		Require = "",
	},
	Entity = {
		CopyOf = "",
		PresetName = "",
		-- InstanceName = "",
		Description = "",
		RandomWeight = "",
		AddToGroup = "",
	},
	InputMapping = {
		KeyMap = "",
		MouseButtonMap = "",
		JoyButtonMap = "",
		StickMap = "",
		AxisMap = "",
		DirectionMap = "",
	},
	InputScheme = {
		Device = "",
		Preset = "",
		JoystickDeadzoneType = "",
		JoystickDeadzone = "",
		DigitalAimSpeed = "",
	},
	Matrix = {
		AngleDegrees = "",
		AngleRadians = "",
	},
	Serializable = nil,
	Vector = {
		X = "",
		Y = "",
	},
}
